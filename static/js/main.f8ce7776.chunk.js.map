{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validateUrl","useState","Math","random","toFixed","slice","id","isValidUrl","setIsValidUrl","touched","setTouched","hasError","trim","hasInvalidUrl","htmlFor","type","classNames","event","currentValue","target","isUrlConfirmed","test","onBlur","emptyMovieField","NewMovie","onAdd","count","setCount","setMovie","reqiuredIsEmpty","onSubmit","preventDefault","newTitle","newDescription","newImgUrl","newImdbUrl","newImdbId","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8ce7776.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validateUrl?: boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  validateUrl = false,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [isValidUrl, setIsValidUrl] = useState(!validateUrl);\n  const [touched, setTouched] = useState(false);\n\n  const hasError = touched && required && !(value.trim());\n  const hasInvalidUrl = !hasError && touched && !isValidUrl;\n\n  const confirmUrl = (url: string) => {\n    // eslint-disable-next-line\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    return pattern.test(url);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const currentValue = event.target.value;\n\n    onChange(currentValue);\n\n    if (validateUrl) {\n      const isUrlConfirmed = confirmUrl(currentValue);\n\n      setIsValidUrl(isUrlConfirmed);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasInvalidUrl && (\n        <p className=\"help is-danger\">{`${label} is invalid`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst emptyMovieField = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [movie, setMovie] = useState<Movie>({ ...emptyMovieField });\n\n  const reset = () => {\n    setMovie({ ...emptyMovieField });\n  };\n\n  const reqiuredIsEmpty = () => {\n    return !(movie.title.trim()) || !(movie.imgUrl.trim())\n      || !(movie.imdbUrl.trim()) || !(movie.imdbId.trim());\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (reqiuredIsEmpty()) {\n      return;\n    }\n\n    onAdd({ ...movie });\n\n    setCount(count + 1);\n\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={(newTitle) => setMovie({\n          ...movie,\n          title: newTitle,\n        })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={(newDescription) => setMovie({\n          ...movie,\n          description: newDescription,\n        })}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={(newImgUrl) => setMovie({\n          ...movie,\n          imgUrl: newImgUrl,\n        })}\n        required\n        validateUrl\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={(newImdbUrl) => setMovie({\n          ...movie,\n          imdbUrl: newImdbUrl,\n        })}\n        required\n        validateUrl\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={(newImdbId) => setMovie({\n          ...movie,\n          imdbId: newImdbId,\n        })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={reqiuredIsEmpty()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies((currentMovies) => [...currentMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}